import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';

/**
 * Generated class for the GamePage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-game',
  templateUrl: 'game.html',
})
export class GamePage {

  rows: any = 15;
  columns: any = 15;

  rowArray: any;
  columnArray: any;

  turn: any; 

  playerArray = [
    {
      playerIndex: 0,
      playerName: 'Human',
      playerColor: 'rgb(210, 31, 153)',
      points: 0
    },
    {
      playerIndex: 1,
      playerName: 'Computer',
      playerColor: 'rgb(27, 182, 58)',
      points: 0
    },
  ];

  barControlObject = {};
  squareControlObject = {};
 
 

  constructor(public navCtrl: NavController, public navParams: NavParams) {


    this.rowArray = Array.from(Array(this.rows),(x,i)=>i); 
    this.columnArray = Array.from(Array(this.columns),(x,i)=>i); 
    
    for(let row = 0; row < (this.rows ); row++) {
      for(let column = 0; column < (this.columns); column++) {

        if(column != (this.columns-1)) {
          let hid = row + "-" + column + "--" + row + "-" + (column + 1);
          this.barControlObject[hid] = {
            background: 'white',
            filled: false
          }; 
        }

        if(row != (this.rows-1)) {
          let vid = row + "-" + column + "--" + (row + 1) + "-" + column;
          this.barControlObject[vid] = {
            background: 'white',
            filled: false
          };
        }

        if(column != (this.columns-1) && row != (this.rows-1)) {
          let sid = row + '-' + column;
          this.squareControlObject[sid] = {
            background: 'white',
            filled: false,
            owner: null
          };
        }

      } 
    } //end for loop 
 
    this.turn = 0;
  
    console.log(Object.keys(this.barControlObject));
    console.log(Object.keys(this.squareControlObject));

 
  }


  checkBarType(r1,c1,r2,c2) {

    if(r1 === r2){
      return 'h'
    }
    else {
      return 'v'
    }

  }

  clickBar(id,player) {

    //check to see if it is players turn 

    if(player === this.turn) { 

      let checkBarState = this.barControlObject[id].filled;
      if(checkBarState == true) {
        console.log("This bar is already filled");
      }
      else if (checkBarState == false) {


        console.log(id);

        let filledAbove = false;
        let filledBelow = false;
        let filledRight = false;
        let filledLeft =  false;

        this.barControlObject[id] = {
          background: 'black',
          filled: true
        };

        let coord1 = id.split('--')[0];
        let coord2 = id.split('--')[1];

        let r1 = parseInt(coord1.split('-')[0],10);
        let c1 = parseInt(coord1.split('-')[1],10);
        let r2 = parseInt(coord2.split('-')[0],10);
        let c2 = parseInt(coord2.split('-')[1],10);

        let bar = this.checkBarType(r1,c1,r2,c2);

        if (bar === 'v') {

          //check to the right
          if(c1 < (this.columns - 1)) {

          let acrossRightId = r1 + '-' + (c1 + 1) + '--' + r2 + '-' + (c2 + 1);
          let checkRightAcross = this.barControlObject[acrossRightId].filled;
          
          let topRightId = r1 + '-' + c1 + '--' + (r2 - 1) + '-' + (c2 + 1);
          let checkTopRight = this.barControlObject[topRightId].filled;

          let bottomRightId =  (r1 + 1) + '-' + c1 + '--' + r2 + '-' + (c2 + 1);
          let checkBottomRight = this.barControlObject[bottomRightId].filled;

            if (checkRightAcross == true && checkTopRight == true && checkBottomRight == true) 
            {
              let squareCoords = r1 + '-' + c1;
              this.squareControlObject[squareCoords] = {
                background: this.playerArray[this.turn].playerColor,
                filled: true,
                owner: this.playerArray[this.turn].playerIndex
              };

              filledRight = true;
              this.awardPoint(this.turn);

              this.promptComputerToGoAgain();


            }
          } // if not last column 

          //check to the left
          if(c1 > 0) {

            let acrossLeftId = r1 + '-' + (c1 - 1) + '--' + r2 + '-' + (c2 - 1);
            let checkAcrossLeft = this.barControlObject[acrossLeftId].filled;

            let topLefttId = r1 + '-' + (c1 - 1) + '--' + (r2 - 1) + '-' + c2;
            let checkTopLeft = this.barControlObject[topLefttId].filled;

            let bottomLeftId = (r1 + 1) + '-' + (c1 - 1) + '--' + r2 + '-' + c2;
            let checkBottomLeft = this.barControlObject[bottomLeftId].filled;

            if (checkAcrossLeft == true && checkTopLeft == true && checkBottomLeft == true) 
            {
              let squareCoords = r1 + '-' + (c1 - 1);
              this.squareControlObject[squareCoords] = {
                background: this.playerArray[this.turn].playerColor,
                filled: true,
                owner: this.playerArray[this.turn].playerIndex
              };
  
              filledLeft = true;
              this.awardPoint(this.turn);
              this.promptComputerToGoAgain() 

            }

          } //if not first column 
        } //if vbar


        else if (bar === 'h') {

          //check above 
          if(r1 > 0) {
            let acrossTopId = (r1 - 1) + '-' + c1 + '--' + (r2 -1)+ '-' + c2;
            let checkAcrossTop = this.barControlObject[acrossTopId].filled;

            let topLefttId = (r1 - 1) + '-' + c1 + '--' + r2+ '-' + (c2 - 1);
            let checkTopLeft = this.barControlObject[topLefttId].filled;

            let topRightId = (r1 - 1) + '-' + (c1 + 1) + '--' + r2+ '-' + c2;
            let checkTopRight = this.barControlObject[topRightId].filled;

            if (checkAcrossTop == true && checkTopLeft == true && checkTopRight == true) 
            {
              let squareCoords = (r1 - 1) + '-' + c1;
              this.squareControlObject[squareCoords] = {
                background: this.playerArray[this.turn].playerColor,
                filled: true,
                owner: this.playerArray[this.turn].playerIndex
              };
              filledAbove = true;
              this.awardPoint(this.turn);
              this.promptComputerToGoAgain() 

            }
          } //if not the top row

          //check below 
          if(r1 < (this.rows - 1)) {
            let acrossBottomId = (r1 + 1) + '-' + c1 + '--' + (r2 + 1)+ '-' + c2;
            let checkAcrossBottom = this.barControlObject[acrossBottomId].filled;

            let bottomLefttId = r1 + '-' + c1 + '--' + (r2 + 1) + '-' + (c2 - 1);
            let checkBottomLeft = this.barControlObject[bottomLefttId].filled;

            let bottomRightId = r1 + '-' + (c1 + 1) + '--' + (r2 + 1) + '-' + c2;
            let checkBottomRight = this.barControlObject[bottomRightId].filled;

            console.log('checkAcrossBottom: ' +  checkAcrossBottom +  ' | checkBottomLeft: ' + checkBottomLeft + ' | checkBottomRight: ' + checkBottomRight);

            if (checkAcrossBottom == true && checkBottomLeft == true && checkBottomRight) 
            {
              let squareCoords = r1 + '-' + c1;
              this.squareControlObject[squareCoords] = {
                background: this.playerArray[this.turn].playerColor,
                filled: true,
                owner: this.playerArray[this.turn].playerIndex
              };
              filledBelow = true;
              this.awardPoint(this.turn);
              this.promptComputerToGoAgain() 

            }
    
          } //if not last row
        } // if hbar

        if(filledAbove === false &&
          filledBelow === false &&
          filledLeft  === false &&
          filledRight === false) {
          this.chessClock();

          setTimeout(()=>{ 
            this.takeTurn();
          }, 300);
        }

      } //if filled state false 
    } //is players turn
  } //click 




  chessClock() { 
    if (this.turn === 0) {
      this.turn = 1;
    }
    else if (this.turn === 1) {
      this.turn = 0;
    }
  }

  awardPoint(playerId) {
    this.playerArray[playerId].points = this.playerArray[playerId].points + 1;
  } 

   promptComputerToGoAgain() {

    if (this.turn === 0) {
      console.log('its still humans turn');
    }
    else if (this.turn === 1) {
      setTimeout(()=>{ 
        this.takeTurn();
       }, 300);    }

   }







  //Opponent AI

  takeTurn() {

    if( this.turn === 0) {
      console.log('Its not my turn');
    }
    else if(this.turn === 1) { 
      console.log('Im going to take my turn');

      // "filter" the control Object to find only the bars that are not already filled I am going to loop through it... TODO: ask someone if there is a better way to acheive this.

      let openBars = [];

      //select only unfilled bars
      for (let barId in this.barControlObject) {
       let filledCheck =  this.barControlObject[barId].filled;
       if(!filledCheck) {
         openBars.push(barId);
       }
      }

      let initialBoxPlayScoreSheet = {};

      openBars.forEach((barId) => {
        let score = this.checkForBoxPlays(barId, this.barControlObject);
        initialBoxPlayScoreSheet[barId] = score;
      });

      let initialBoxScoreSheetSum  = this.objSum(initialBoxPlayScoreSheet);

      console.log(initialBoxScoreSheetSum);

      let finalBoxPlayScoreSheet = {};

      openBars.forEach((barId) => {
        //initial check of score
        let score = this.checkForBoxPlays(barId, this.barControlObject);

        if(score != 0){ //if the score is not zero
          //create a copy using assign of the control obj /
          // modify it by setting fill state on the bar that's being tested and then /
          //recheck the whole map to see if there are any new near-boxes.

          let hypotheticalControlObj = Object.assign({}, this.barControlObject);

          hypotheticalControlObj[barId] = {
            filled: true
          };

          let newBoxPlayScoreSheet = {};
          for (let barId in hypotheticalControlObj) {

            if(hypotheticalControlObj[barId].filled == false) {  //perform check to see if the bar is unfilled
            let score = this.checkForBoxPlays(barId, hypotheticalControlObj); //check for near box
            newBoxPlayScoreSheet[barId] = score;
            }
          }

          let newBoxScoreSheetSum  = this.objSum(newBoxPlayScoreSheet);
          console.log(newBoxScoreSheetSum);

          let i = 0;
          let noMoreHits = false;
          do {
            i = i + 1;

              noMoreHits = true;
            
          } while (!noMoreHits);
    
          finalBoxPlayScoreSheet[barId] = score;

        } //end if score is not zero
      }); // end foreach
 

      //chose an open bar at random and play in it
      if(openBars.length > 0) { 
        let whichBar = this.getRandomInt(openBars.length);
        let chosenId = openBars[whichBar];
        this.clickBar(chosenId,1); 
      }

    }

  } //take turn function 



  checkForBoxPlays(id, controlObject) {

    let score = 0;

    let coord1 = id.split('--')[0];
    let coord2 = id.split('--')[1];

    let r1 = parseInt(coord1.split('-')[0],10);
    let c1 = parseInt(coord1.split('-')[1],10);
    let r2 = parseInt(coord2.split('-')[0],10);
    let c2 = parseInt(coord2.split('-')[1],10);

    let bar = this.checkBarType(r1,c1,r2,c2);

    if (bar === 'v') {

      //check to the right
      if(c1 < (this.columns - 1)) {

      let acrossRightId = r1 + '-' + (c1 + 1) + '--' + r2 + '-' + (c2 + 1);
      let checkRightAcross = controlObject[acrossRightId].filled;
      
      let topRightId = r1 + '-' + c1 + '--' + (r2 - 1) + '-' + (c2 + 1);
      let checkTopRight = controlObject[topRightId].filled;

      let bottomRightId =  (r1 + 1) + '-' + c1 + '--' + r2 + '-' + (c2 + 1);
      let checkBottomRight = controlObject[bottomRightId].filled;

        if (checkRightAcross == true && checkTopRight == true && checkBottomRight == true) 
        {
          score = score +1;
         
        }
      } // if not last column 

      //check to the left
      if(c1 > 0) {

        let acrossLeftId = r1 + '-' + (c1 - 1) + '--' + r2 + '-' + (c2 - 1);
        let checkAcrossLeft = controlObject[acrossLeftId].filled;

        let topLefttId = r1 + '-' + (c1 - 1) + '--' + (r2 - 1) + '-' + c2;
        let checkTopLeft = controlObject[topLefttId].filled;

        let bottomLeftId = (r1 + 1) + '-' + (c1 - 1) + '--' + r2 + '-' + c2;
        let checkBottomLeft = controlObject[bottomLeftId].filled;

        if (checkAcrossLeft == true && checkTopLeft == true && checkBottomLeft == true) 
        {
          score = score +1;
        }

      } //if not first column 
    } //if vbar


    else if (bar === 'h') {

      //check above 
      if(r1 > 0) {
        let acrossTopId = (r1 - 1) + '-' + c1 + '--' + (r2 -1)+ '-' + c2;
        let checkAcrossTop = controlObject[acrossTopId].filled;

        let topLefttId = (r1 - 1) + '-' + c1 + '--' + r2+ '-' + (c2 - 1);
        let checkTopLeft = controlObject[topLefttId].filled;

        let topRightId = (r1 - 1) + '-' + (c1 + 1) + '--' + r2+ '-' + c2;
        let checkTopRight = controlObject[topRightId].filled;

        if (checkAcrossTop == true && checkTopLeft == true && checkTopRight == true) 
        {
          score = score +1;
        }
      } //if not the top row

      //check below 
      if(r1 < (this.rows - 1)) {
        let acrossBottomId = (r1 + 1) + '-' + c1 + '--' + (r2 + 1)+ '-' + c2;
        let checkAcrossBottom = controlObject[acrossBottomId].filled;

        let bottomLefttId = r1 + '-' + c1 + '--' + (r2 + 1) + '-' + (c2 - 1);
        let checkBottomLeft = controlObject[bottomLefttId].filled;

        let bottomRightId = r1 + '-' + (c1 + 1) + '--' + (r2 + 1) + '-' + c2;
        let checkBottomRight = controlObject[bottomRightId].filled;

        if (checkAcrossBottom == true && checkBottomLeft == true && checkBottomRight) 
        {
          score = score +1;
        }

      } //if not last row
    } // if hbar

    return score

  }



  //util functions

  getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
  }

  objSum( obj ) {
    let sum = 0;
    for( let el in obj ) {
      if( obj.hasOwnProperty( el ) ) {
        sum += parseFloat( obj[el] );
      }
    }
    return sum;
  }



  ionViewWillLoad() {

  }



}
